;; ============================================================================
;; Variables
;; ============================================================================
(deflisten workspaces :initial "[]" "bash ~/.config/eww/scripts/get-workspaces.sh")
(deflisten current_workspace :initial "1" "bash ~/.config/eww/scripts/get-active-workspace.sh")
(deflisten window :initial " NixOS " "bash ~/.config/eww/scripts/get-window-title.sh")

(defpoll time :interval "1s" "date '+%I:%M %p'")
(defpoll date :interval "1s" "date '+%a %b %d'")


;; ============================================================================
;; Widgets
;; ============================================================================
;; logo
(defwidget nixosLogo []
  (box :class "nixosLogo"
    (image :path "${EWW_CONFIG_DIR}/assets/nixos.png"
           :image-width 24
           :image-height 24)))

;; hyprland workspaces
(defwidget workspaces []
  (box :space-evenly true
    (label :text "${workspaces}${current_workspace}" :visible false)
    (for workspace in workspaces
      (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
        (box :class "workspaces ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
          (label :text "${workspace.id == current_workspace ? "" : ""}"))))))

;; hyprland window title
(defwidget window_title []
  (box :class "window_title"
    (label :text "${window}"
           :limit-width 100)))

;; clock
(defwidget time []
  (box :class "time"
    (label :text "${time}")))

;; date
(defwidget date []
  (box :class "date"
    (label :text "${date}")))


;; ============================================================================
;; Bar structure
;; ============================================================================
;; left side
(defwidget leftBox []
  (box :class "leftBox"
       :halign "start"
       :space-evenly false
       (nixosLogo)
       (window_title)))

;; center
(defwidget centerBox []
  (box :class "centerBox"
       :halign "center"
       (workspaces)))

;; right side
(defwidget rightBox []
  (box :class "rightBox"
       :halign "end"
       (date)
       (time)))

;; eww bar
(defwidget eww []
  (box :class "eww"
       (leftBox)
       (centerBox)
       (rightBox)))


;; ============================================================================
;; EWW
;; ============================================================================
(defwindow bar
  ;; Which monitor this window should be displayed on.
  :monitor 0
  ;; Geometry of the window.
  :geometry (geometry :x "0%"
                      :y "0px"
                      :width "100%"
                      :height "30px"
                      :anchor "top center")
  ;; Where the window should appear in the stack. Possible values: fg, bg.
  :stacking "bg"
  ;; Whether the compositor should reserve space for the window automatically.
  :exclusive true
  (eww))
