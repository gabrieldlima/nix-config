(defpoll time :interval "1s" "date '+%I:%M %p'")


;; ----------------------------------------------------------------------------
(defwidget nixosLogo []
  (box :class "nixosLogo"
    (image :path "${EWW_CONFIG_DIR}/assets/nixos.png"
           :image-width 24
           :image-height 24)))

(defwidget desktop []
  (box :class "desktop"
    (label :text "NixOS")))

(defwidget clock []
  (box :class "clock"
    (label :text "${time}")))


;; ----------------------------------------------------------------------------
(defwidget leftBox []
  (box :class "leftBox"
       :halign "start"
       (nixosLogo)))

(defwidget centerBox []
  (box :class "centerBox"
       :halign "center"
       (desktop)))

(defwidget rightBox []
  (box :class "rightBox"
       :halign "end"
       (clock)))

(defwidget eww []
  (box :class "eww"
       (leftBox)
       (centerBox)
       (rightBox)))


;; ----------------------------------------------------------------------------
(defwindow bar
  ;; Which monitor this window should be displayed on.
  :monitor 0
  ;; Geometry of the window.
  :geometry (geometry :x "0%"
                      :y "0px"
                      :width "100%"
                      :height "30px"
                      :anchor "top center")
  ;; Where the window should appear in the stack. Possible values: fg, bg.
  :stacking "bg"
  ;; Whether the window manager should ignore this window.
  :wm-ignore true
  ;; Specify how the window manager should make space for your window.
  ;; This is useful for bars, which should not overlap any other windows.
  :reserve (struts :side "top"
                   :distance "30px")
  ;; Specify what type of window this is. This will be used by your window
  ;; manager to determine how it should handle your window. Possible values:
  ;; normal, dock, toolbar, dialog, desktop.
  ;; Default: dock if reserve is specified, normal otherwise.
  :windowtype "dock"
  (eww))
